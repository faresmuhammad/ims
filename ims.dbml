Project InventoryManagementSystem {
    database_type: 'MySQL'
    note: 'Inventory Management System Database'
}

enum Gender{
  male
  female
}

enum CategoryTarget{
  Customer
  Owner
}

enum OrderStatus{
  Processing
  Shipped
  OnTheWay
  Delivered
}

enum PaymentMethod{
  Cash
  CreditCard
}

Table Users {
  id bigint [pk]
  username string [not null,unique]
  email string [null,unique]
  password string [not null]
  remember_token string
  created_at timestamp
  updated_at timestamp
}
//Roles can be Customer, Admin, Super Admin and Warehouse Worker
Table Roles{
  id bigint [pk]
  name string [not null]
  description text
}

Table user_role_pivot{
  user_id bigint [pk, ref: > Users.id]
  role_id bigint [pk, ref: > Roles.id]
}

Table Categories {
  id bigint [pk, not null, increment]
  parent_id bigint [ref: < Categories.id]
  name string [not null]
  slug string [not null]
  description text
  created_at timestamp
  updated_at timestamp
}


Table Products{
  id bigint [pk]
  code string [unique, not null]
  name string [not null]
  slug string [not null]
  description text
  //price field is the current price
  //So when the price is updated, a price history entry will be added in PriceHistory Table
  price double [default: 0.0]
  category_id bigint [ref: > Categories.id]
  stock_offset int [default: 0]
  created_at timestamp
  updated_at timestamp
}




//Related to IMS System
Table Suppliers{
  id bigint [pk]
  code string [unique]
  name string [not null]
  phone string
}



Table Orders{
  id bigint [pk]
  reference_code string [unique]
  user_id bigint [ref: > Users.id]
  supplier_id bigint [ref: > Suppliers.id]
  date timestamp
  total_amount double
  payment_method PaymentMethod
  //This discount is overall order discount and it's separated from discount per item
  discount float [default: 0.0]
  is_draft bool [default: true]
}

Table OrderItems{
  id bigint [pk]
  order_id bigint [ref: > Orders.id]
  product_id bigint [ref: - Products.id]
  discount float [default: 0.0]
  price_per_unit double
  quantity int [default: 1]
  parts int  [default: 0]
}

Table Stocks{
  id bigint [pk]
  code string [unique]
  product_id bigint [ref: > Products.id]
  supplier_id bigint [ref: > Suppliers.id]
  expire_date date [null]
  original_quantity int
  available_quantity int
  available_parts int
  sold_quantity int
  sold_parts int
  parts_per_unit int
  discount float
  price double
}
//Questions:

//[most logic] the price of a part is the price of the product divided by the number of parts
  //set the number of parts per unit
  //if a part is ordered, decrease the available quantity and set the available parts to the number of parts per nit minus - the ordered parts
  //if a part is returned, 
    //if the available parts after the return is equal to the number of parts per unit, increase the available quantity and set the available parts to 0
    //if the available parts after the return is less than the number of parts per unit, increase the available parts

//I think when amr inserts a price for the stock he will insert into the price column then insert the discount
//in the backend in case of supplier total price calculated as [price * (1 - discount)] --> that is what amr will pay to the supplier
//in case of customer, the total price will be [price * (1 - discount)] --> that is what the customer will pay
// supplier
// name    |    unit price    |    customer price    |    discount    |    total price
// pro1    |    -             |    -                 |    -           |    -
// // 
// customer
// name    |    unit price    |    discount    |    total price
// pro1    |    -             |    -           |    -         
// // 
// return
// name    |    unit price    |    discount    |    total price
// pro1    |    -             |    -           |    -         



//product

//how discount applied to the stock for supplier and for the customer
//how discount applied in case of return

Table Notes{
  id bigint [pk]
  content text
  created_at timestamp
  updated_at timestamp
}

Table Shifts{
    id bigint [pk]
    start datetime [not null, note: "Default value is the current datetime"]
    end datetime [null, default: null]
    expected_amount double [null]
    real_amount double [null]
    difference double [null]
    user_id bigint [ref: > Users.id]
}
